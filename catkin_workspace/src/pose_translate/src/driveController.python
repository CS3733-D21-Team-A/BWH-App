#! /usr/bin/env python

import rospy
import string
import actionlib
from nav_msgs.msg import Odometry
from tf.transformations import *
from std_msgs.msg import *
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from move_base_msgs.msg import *
import math


class driveController:

    def __init__(self):
        rospy.init_node('drive_controller', anonymous=True)
        odom_sub = rospy.Subscriber('/odom', Odometry, self.callback)
        dir_sub = rospy.Subscriber('/chatter', String, self.parseDir)
        self.odom_pub = rospy.Publisher('/odom_String', String, queue_size = 10)
        self.curGoal = rospy.Publisher('/move_base_simple/goal', PoseStamped , queue_size = 5)
        move_base_result = rospy.Subscriber('/move_base/result',MoveBaseActionResult, self.moveToNext)
        yolo_sub = rospy.Subscriber('/yolo_info', String, self.yoloCallBack)
        self.directionsString = []
        self.directionsList = []
        self.msgPrev = None
        self.dirIndex = 0
        self.faraway = False
        self.curPose = PoseStamped()
        self.rate = rospy.Rate(5)
        rospy.loginfo("driveController running")
    
    def callback(self,msg):
        self.curPose = msg.pose.pose

    def publishGoal(self):
        goal = PoseStamped()
        goal.header.seq = 1
        goal.header.stamp = rospy.Time.now()
        goal.header.frame_id = "map"
        goal.pose.position.x = self.directionsList[self.dirIndex][0]
        goal.pose.position.y = self.directionsList[self.dirIndex][1]
        orient = quaternion_from_euler(0,0,self.directionsList[self.dirIndex][2])
        goal.pose.orientation.x = orient[0]
        goal.pose.orientation.y = orient[1]
        goal.pose.orientation.z = orient[2]
        goal.pose.orientation.w = orient[3]

        print goal
        rospy.sleep(1)
        self.curGoal.publish(goal)

    def movebase_client(self):
        client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
        client.wait_for_server()

        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = self.directionsList[self.dirIndex][0]
        goal.target_pose.pose.position.y = self.directionsList[self.dirIndex][1]
        goal.target_pose.pose.orientation.w = 1.0

        client.send_goal(goal)

        print goal
        wait = client.wait_for_result()
        if not wait:
            rospy.logerr("Action server not available!")
            rospy.signal_shutdown("Action server not available!")
        else:
            return client.get_result()

    def parseDir(self,msg):
        if self.msgPrev != msg.data:
            if msg.data == "cancel nav":
                print msg.data
                rospy.loginfo("current Pose")
                print self.curPose

                goal = PoseStamped()
                goal.header.seq = 1
                goal.header.stamp = rospy.Time.now()
                goal.header.frame_id = "map"
                goal.pose.position.x = self.curPose.position.x + 213
                goal.pose.position.y = self.curPose.position.y - 105
                goal.pose.position.z = self.curPose.position.z
                goal.pose.orientation.x = self.curPose.orientation.x
                goal.pose.orientation.y = self.curPose.orientation.y
                goal.pose.orientation.z = self.curPose.orientation.z
                goal.pose.orientation.w = self.curPose.orientation.w
            
                rospy.loginfo("Pose to send")
                self.faraway = True
                print goal
                rospy.sleep(1)
                self.curGoal.publish(goal)
            
            else:

                self.directionsList = []
                self.dirIndex = 0
                numOfSemiColoum = msg.data.count(";")
                self.directionsString = msg.data.split(";",numOfSemiColoum)
                for i in range(len(self.directionsString)-1):
                    x = float(int(self.directionsString[i].partition(",")[0]))/10
                    y = -float(int(self.directionsString[i].partition(",")[2]))/10
                    if i == len(self.directionsString)-2:
                        delX = float(int(self.directionsString[i].partition(",")[0])) - float(int(self.directionsString[i-1].partition(",")[0]))
                        delY = -float(int(self.directionsString[i].partition(",")[2])) + float(int(self.directionsString[i-1].partition(",")[2]))
                        rotation = math.atan2(delY,delX)
                    else:
                        delX = float(int(self.directionsString[i+1].partition(",")[0])) - float(int(self.directionsString[i].partition(",")[0]))
                        delY = - float(int(self.directionsString[i+1].partition(",")[2])) + float(int(self.directionsString[i].partition(",")[2]))
                        rotation = math.atan2(delY,delX)
                    directionsPair = [x,y,rotation]
                    self.directionsList.append(directionsPair)

                print self.directionsList
                self.msgPrev = msg.data
                self.publishGoal()
                #self.movebase_client()

    def moveToNext(self,msg):
        if msg.status.text == "Goal reached." and self.faraway != True:
            self.dirIndex += 1
            self.publishGoal()

    def yoloCallBack(self,msg):

        if msg.data == "person faraway":
            print msg.data
            rospy.loginfo("current Pose")
            print self.curPose

            goal = PoseStamped()
            goal.header.seq = 1
            goal.header.stamp = rospy.Time.now()
            goal.header.frame_id = "map"
            goal.pose.position.x = self.curPose.position.x + 213
            goal.pose.position.y = self.curPose.position.y - 105
            goal.pose.position.z = self.curPose.position.z
            goal.pose.orientation.x = self.curPose.orientation.x
            goal.pose.orientation.y = self.curPose.orientation.y
            goal.pose.orientation.z = self.curPose.orientation.z
            goal.pose.orientation.w = self.curPose.orientation.w
            
            rospy.loginfo("Pose to send")
            self.faraway = True
            print goal
            rospy.sleep(1)
            self.curGoal.publish(goal)
            
        elif msg.data == "person back":
            print msg.data
            self.faraway = False
            self.publishGoal()

    def run(self):
        rospy.spin()

if __name__ == '__main__':
    drive = driveController()
    rospy.sleep(1)
    drive.run()